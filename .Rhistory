data("example_genelist")
data("mouse_to_human_homologs")
m2h = unique(mouse_to_human_homologs[,c("HGNC.symbol","MGI.symbol")])
mouse.hits = unique(m2h[m2h$HGNC.symbol %in% example_genelist,"MGI.symbol"])
human.hits = unique(m2h[m2h$HGNC.symbol %in% example_genelist,"HGNC.symbol"])
human.bg = unique(m2h$HGNC.symbol)
mouse.bg  = unique(m2h$MGI.symbol)
#'
# Bootstrap significance testing, without controlling for transcript length and GC content
full_results = bootstrap.enrichment.test(sct_data=ctd,hits=mouse.hits,
bg=mouse.bg,reps=reps,annotLevel=2,sctSpecies="mouse",genelistSpecies="mouse")
#'
generate.bootstrap.plots(sct_data=celltype_data,hits=mouse.hits, bg=mouse.bg,
reps=reps,full_results=full_results,listFileName="Example",
genelistSpecies="mouse",sctSpecies="mouse", annotLevel=1)
generate.bootstrap.plots(sct_data=ctd,hits=mouse.hits, bg=mouse.bg,
reps=reps,full_results=full_results,listFileName="Example",
genelistSpecies="mouse",sctSpecies="mouse", annotLevel=1)
data("ctd")
generate.bootstrap.plots(sct_data=ctd,hits=mouse.hits, bg=mouse.bg,
reps=reps,full_results=full_results,listFileName="Example",
genelistSpecies="mouse",sctSpecies="mouse", annotLevel=1)
dim(ctd[[1]]$specificity)
mouse.hits
mouse.bg
reps
full_results
full_results$results
generate.bootstrap.plots(sct_data=ctd,hits=mouse.hits, bg=mouse.bg,
reps=reps,full_results=full_results$results,listFileName="Example",
genelistSpecies="mouse",sctSpecies="mouse", annotLevel=1)
generate.bootstrap.plots(sct_data=ctd,hits=mouse.hits,bg=mouse.bg,reps=100,annotLevel=1,full_results=full_results,listFileName="VignetteGraphs")
library(EWCE)
generate.bootstrap.plots(sct_data=ctd,hits=mouse.hits,bg=mouse.bg,reps=100,annotLevel=1,full_results=full_results,listFileName="VignetteGraphs")
dim(expD)
bootstrap_set = sample(combinedGenes,length(hits))
bootstrap_set
length(hits)
bg
combinedGenes
ValidGenes = rownames(sct_data[[annotLevel]]$specificity)[rownames(sct_data[[annotLevel]]$specificity) %in% bootstrap_set]
ValidGenes
expD = sct_data[[annotLevel]]$specificity[ValidGenes,]
dim(expD)
cc
signif_res
full_results$results$CellType
unique(full_results$results$CellType)_
unique(full_results$results$CellType)
as.character(unique(full_results$results$CellType))
sum(!as.character(unique(full_results$results$CellType)) %in% colnames(sct_data[[1]]$specificity))
library(EWCE)
generate.bootstrap.plots(sct_data=ctd,hits=mouse.hits,bg=mouse.bg,reps=100,annotLevel=1,full_results=full_results,listFileName="VignetteGraphs")
full_results = bootstrap.enrichment.test(sct_data=ctd,hits=mouse.hits,
bg=mouse.bg,reps=reps,annotLevel=1,sctSpecies="mouse",genelistSpecies="mouse")
generate.bootstrap.plots(sct_data=ctd,hits=mouse.hits, bg=mouse.bg,
reps=reps,full_results=full_results$results,listFileName="Example",
genelistSpecies="mouse",sctSpecies="mouse", annotLevel=1)
generate.bootstrap.plots(sct_data=ctd,hits=mouse.hits, bg=mouse.bg,
reps=reps,full_results=full_results,listFileName="Example",
genelistSpecies="mouse",sctSpecies="mouse", annotLevel=1)
full_results$results$CellType
colnames(ctd[[1]]$specificity)
sct_data=ctd;hits=mouse.hits; bg=mouse.bg;
reps=reps;full_results=full_results;listFileName="Example";
genelistSpecies="mouse";sctSpecies="mouse"; annotLevel=1
if(length(full_results)!=3){stop("ERROR: full_results is not valid output from the bootstrap.enrichment.test function")}
if(sum(!as.character(unique(full_results$results$CellType)) %in% colnames(sct_data[[1]]$specificity))==0){
stop("ERROR: No celltypes in full_results are found in sct_data. Perhaps the wrong annotLevel was used?")
}
if(sum(!as.character(unique(full_results$results$CellType)) %in% colnames(sct_data[[1]]$specificity))>0){
stop("ERROR: Not all celltypes in full_results are found in sct_data. Perhaps the wrong annotLevel was used?")
}
length(colnames(sct_data[[1]]$specificity)))
length(colnames(sct_data[[1]]$specificity))
if(sum(!as.character(unique(full_results$results$CellType)) %in% colnames(sct_data[[1]]$specificity))==length(as.character(unique(full_results$results$CellType))){
stop("ERROR: No celltypes in full_results are found in sct_data. Perhaps the wrong annotLevel was used?")
}
if(sum(!as.character(unique(full_results$results$CellType)) %in% colnames(sct_data[[1]]$specificity))>0){
stop("ERROR: Not all celltypes in full_results are found in sct_data. Perhaps the wrong annotLevel was used?")
}
if(sum(!as.character(unique(full_results$results$CellType)) %in% colnames(sct_data[[1]]$specificity))==length(as.character(unique(full_results$results$CellType))){
stop("ERROR: No celltypes in full_results are found in sct_data. Perhaps the wrong annotLevel was used?")
}
if(sum(!as.character(unique(full_results$results$CellType)) %in% colnames(sct_data[[1]]$specificity))>0){
stop("ERROR: Not all celltypes in full_results are found in sct_data. Perhaps the wrong annotLevel was used?")
}
if(sum(!as.character(unique(full_results$results$CellType)) %in% colnames(sct_data[[1]]$specificity))==length(as.character(unique(full_results$results$CellType)))){
stop("ERROR: No celltypes in full_results are found in sct_data. Perhaps the wrong annotLevel was used?")
}
if(sum(!as.character(unique(full_results$results$CellType)) %in% colnames(sct_data[[1]]$specificity))>0){
stop("ERROR: Not all celltypes in full_results are found in sct_data. Perhaps the wrong annotLevel was used?")
}
generate.bootstrap.plots <- function(sct_data, hits, bg, genelistSpecies="mouse",sctSpecies="mouse", reps, annotLevel=1, full_results=NA, listFileName=""){
# Check the arguments
if(length(full_results)!=3){stop("ERROR: full_results is not valid output from the bootstrap.enrichment.test function")}
if(sum(!as.character(unique(full_results$results$CellType)) %in% colnames(sct_data[[1]]$specificity))==length(as.character(unique(full_results$results$CellType)))){
stop("ERROR: No celltypes in full_results are found in sct_data. Perhaps the wrong annotLevel was used?")
}
if(sum(!as.character(unique(full_results$results$CellType)) %in% colnames(sct_data[[1]]$specificity))>0){
stop("ERROR: Not all celltypes in full_results are found in sct_data. Perhaps the wrong annotLevel was used?")
}
# Add annotLevel to file name tag
listFileName = sprintf("%s_level%s",listFileName,annotLevel)
results = full_results$results
# Check gene lists
checkedLists = check.ewce.genelist.inputs(sct_data,hits,bg,genelistSpecies,sctSpecies)
hits=checkedLists$hits
bg=checkedLists$bg
combinedGenes=unique(c(hits,bg))
# Get expression data of bootstrapped genes
signif_res = rownames(results)[results$p<0.05]
nReps = 1000
exp_mats = list()
for(cc in signif_res){
exp_mats[[cc]] = matrix(0,nrow=nReps,ncol=length(hits))
rownames(exp_mats[[cc]]) = sprintf("Rep%s",1:nReps)
}
for(s in 1:nReps){
bootstrap_set = sample(combinedGenes,length(hits))
ValidGenes = rownames(sct_data[[annotLevel]]$specificity)[rownames(sct_data[[annotLevel]]$specificity) %in% bootstrap_set]
expD = sct_data[[annotLevel]]$specificity[ValidGenes,]
for(cc in signif_res){
exp_mats[[cc]][s,] = sort(expD[,cc])
}
}
# Get expression levels of the hit genes
hit.exp = sct_data[[annotLevel]]$specificity[hits,]
graph_theme = theme_bw(base_size = 12, base_family = "Helvetica") +
theme(panel.grid.major = element_line(size = .5, color = "grey"),
axis.line = element_line(size=.7, color = "black"),legend.position = c(0.75, 0.7), text = element_text(size=14),
axis.title.x = element_text(vjust = -0.35), axis.title.y = element_text(vjust = 0.6)) + theme(legend.title=element_blank())
if (!file.exists("BootstrapPlots")){
dir.create(file.path(getwd(), "BootstrapPlots"))
}
# Plot the QQ plots
for(cc in signif_res){
mean_boot_exp = apply(exp_mats[[cc]],2,mean)
hit_exp = sort(hit.exp[,cc])
hit_exp_names = rownames(hit.exp)[order(hit.exp[,cc])]#names(hit_exp)
dat = data.frame(boot=mean_boot_exp,hit=hit_exp,Gnames=hit_exp_names)
dat$hit = dat$hit*100
dat$boot = dat$boot*100
maxHit = max(dat$hit)
maxX = max(dat$boot)+0.1*max(dat$boot)
#if(sub==TRUE){dat$hit=dat$hit/10;dat$boot=dat$boot/10}
# Plot several variants of the graph
#basic_graph = ggplot(dat,aes(x=boot,y=hit))+geom_point(size=1)+xlab("Mean Bootstrap Expression")+ylab("Expression in cell type (%)\n") + graph_theme +
#    geom_abline(intercept = 0, slope = 1, colour = "red")
basic_graph = ggplot(dat,aes_string(x="boot",y="hit"))+geom_point(size=1)+xlab("Mean Bootstrap Expression")+ylab("Expression in cell type (%)\n") + graph_theme +
geom_abline(intercept = 0, slope = 1, colour = "red")
# Plot without text
pdf(sprintf("BootstrapPlots/qqplot_noText____%s____%s.pdf",listFileName,cc),width=3.5,height=3.5)
print(basic_graph)
dev.off()
dat$symLab = ifelse(dat$hit>25,sprintf("  %s", dat$Gnames),'')
#basic_graph = ggplot(dat,aes(x=boot,y=hit))+geom_point(size=2)+xlab("Mean Bootstrap Expression")+ylab("Expression in cell type (%)\n") + graph_theme +
basic_graph = ggplot(dat,aes_string(x="boot",y="hit"))+geom_point(size=2)+xlab("Mean Bootstrap Expression")+ylab("Expression in cell type (%)\n") + graph_theme +
geom_abline(intercept = 0, slope = 1, colour = "red")
# Plot with gene names
pdf(sprintf("BootstrapPlots/qqplot_wtGSym____%s____%s.pdf",listFileName,cc),width=3.5,height=3.5)
print(basic_graph +
geom_text(aes_string(label="symLab"),hjust=0,vjust=0,size=3) + xlim(c(0,maxX))
)
dev.off()
# Plot with bootstrap distribution
melt_boot = melt(exp_mats[[cc]])
colnames(melt_boot) = c("Rep","Pos","Exp")
actVals = data.frame(pos=as.factor(1:length(hit_exp)),vals=hit_exp)
#if(sub==TRUE){melt_boot$Exp=melt_boot$Exp/10; actVals$vals=actVals$vals/10}
pdf(sprintf("BootstrapPlots/bootDists____%s____%s.pdf",listFileName,cc),width=3.5,height=3.5)
melt_boot$Pos = as.factor(melt_boot$Pos)
#print(ggplot(melt_boot)+geom_boxplot(aes(x=as.factor(Pos),y=Exp),outlier.size=0)+
#         geom_point(aes(x=pos,y=vals),col="red",data=actVals)+
print(ggplot(melt_boot)+geom_boxplot(aes_string(x="Pos",y="Exp"),outlier.size=0)+
geom_point(aes_string(x="pos",y="vals"),col="red",data=actVals)+
ylab("Expression in cell type (%)\n")+
xlab("Least specific --> Most specific") + scale_x_discrete(breaks=NULL)+graph_theme)
dev.off()
# Plot with LOG bootstrap distribution
# - First get the ordered gene names
rownames(dat)=dat$Gnames
datOrdered = data.frame(GSym=rownames(dat),Pos=1:dim(dat)[1])
# - Arrange the data frame for plotting
melt_boot = melt(exp_mats[[cc]])
colnames(melt_boot) = c("Rep","Pos","Exp")
melt_boot$Exp = melt_boot$Exp*100
melt_boot = merge(melt_boot,datOrdered,by="Pos")
melt_boot$GSym = factor(as.character(melt_boot$GSym),levels=as.character(datOrdered$GSym))
# - Prepare the values of the list genes to be plotted as red dots
actVals = data.frame(Pos=as.factor(1:length(hit_exp)),vals=hit_exp*100)
actVals = merge(actVals,datOrdered,by="Pos")
actVals$GSym = factor(as.character(actVals$GSym),levels=as.character(datOrdered$GSym))
# - Determine whether changes are significant
p = rep(1,max(melt_boot$Pos))
for(i in 1:max(melt_boot$Pos)){
p[i] = sum(actVals[actVals$Pos==i,"vals"]<melt_boot[melt_boot$Pos==i,"Exp"])/length(melt_boot[melt_boot$Pos==i,"Exp"])
}
ast = rep("*",max(melt_boot$Pos))
ast[p>0.05] = ""
actVals = cbind(actVals[order(actVals$Pos),],ast)
# - Plot the graph!
# if(sub==TRUE){melt_boot$Exp=melt_boot$Exp/10; actVals$vals=actVals$vals/10}
wd = 1+length(unique(melt_boot[,4]))*0.175
pdf(sprintf("BootstrapPlots/bootDists_LOG____%s____%s.pdf",listFileName,cc),width=wd,height=4)
#melt_boot$Exp=melt_boot$Exp+0.00000001
melt_boot = melt_boot[melt_boot$Exp!=0,]
print(ggplot(melt_boot)+geom_boxplot(aes_string(x="GSym",y="Exp"),outlier.size=0)+graph_theme+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
geom_point(aes_string(x="GSym",y="vals"),col="red",data=actVals)+
geom_text(aes_string(x="GSym",y="vals",label="ast"),colour="black",data=actVals)+
ylab("Expression in cell type (%)\n")+
xlab("Least specific --> Most specific")+scale_y_log10()
)
dev.off()
}
}
library(EWCE)
generate.bootstrap.plots(sct_data=ctd,hits=mouse.hits, bg=mouse.bg,
reps=reps,full_results=full_results,listFileName="Example",
genelistSpecies="mouse",sctSpecies="mouse", annotLevel=1)
library(EWCE)
generate.bootstrap.plots(sct_data=ctd,hits=mouse.hits, bg=mouse.bg,
reps=reps,full_results=full_results,listFileName="Example",
genelistSpecies="mouse",sctSpecies="mouse", annotLevel=1)
#' Generate bootstrap plots
#'
#' \code{generate.bootstrap.plots} takes a genelist and a single cell type transcriptome dataset
#' and generates plots which show how the expression of the genes in the list compares to those
#' in randomly generated gene lists
#'
#' @param sct_data List generated using \code{\link{generate.celltype.data}}
#' @param hits Array of MGI/HGNC gene symbols containing the target gene list.
#' @param bg Array of MGI/HGNC gene symbols containing the background gene list.
#' @param genelistSpecies Either 'mouse' or 'human' depending on whether MGI or HGNC symbols are used for gene lists
#' @param sctSpecies  Either 'mouse' or 'human' depending on whether MGI or HGNC symbols are used for the single cell dataset
#' @param reps Number of random gene lists to generate (default=100 but should be over 10000 for publication quality results)
#' @param annotLevel an integer indicating which level of the annotation to analyse. Default = 1.
#' @param full_results The full output of \code{\link{bootstrap.enrichment.test}} for the same genelist
#' @param listFileName String used as the root for files saved using this function
#' @return Saves a set of pdf files containing graphs. These will be saved with the filename adjusted using the
#' value of listFileName. The files are saved into the 'BootstrapPlot' folder. The files start with one of the following:
#' \itemize{
#'   \item \code{qqplot_noText}: sorts the gene list according to how enriched it is in the relevant celltype. Plots the value in the target list against the mean value in the bootstrapped lists.
#'   \item \code{qqplot_wtGSym}: as above but labels the gene symbols for the highest expressed genes.
#'   \item \code{bootDists}: rather than just showing the mean of the bootstrapped lists, a boxplot shows the distribution of values
#'   \item \code{bootDists_LOG}: shows the bootstrapped distributions with the y-axis shown on a log scale
#' }
#'
#'
#' @examples
#' # Load the single cell data
#' data("ctd")
#'
#' # Set the parameters for the analysis
#' reps=100 # <- Use 100 bootstrap lists so it runs quickly, for publishable analysis use >10000
#'
#' # Load the gene list and get human orthologs
#' data("example_genelist")
#' data("mouse_to_human_homologs")
#' m2h = unique(mouse_to_human_homologs[,c("HGNC.symbol","MGI.symbol")])
#' mouse.hits = unique(m2h[m2h$HGNC.symbol %in% example_genelist,"MGI.symbol"])
#' human.hits = unique(m2h[m2h$HGNC.symbol %in% example_genelist,"HGNC.symbol"])
#' human.bg = unique(m2h$HGNC.symbol)
#' mouse.bg  = unique(m2h$MGI.symbol)
#'
#' # Bootstrap significance testing, without controlling for transcript length and GC content
#' full_results = bootstrap.enrichment.test(sct_data=ctd,hits=mouse.hits,
#'   bg=mouse.bg,reps=reps,annotLevel=1,sctSpecies="mouse",genelistSpecies="mouse")
#'
#' generate.bootstrap.plots(sct_data=ctd,hits=mouse.hits, bg=mouse.bg,
#'      reps=reps,full_results=full_results,listFileName="Example",
#'      genelistSpecies="mouse",sctSpecies="mouse", annotLevel=1)
#' @export
#' @import ggplot2
#' @importFrom reshape2 melt
# @import plyr
generate.bootstrap.plots <- function(sct_data, hits, bg, genelistSpecies="mouse",sctSpecies="mouse", reps, annotLevel=1, full_results=NA, listFileName=""){
# Check the arguments
if(length(full_results)!=3){stop("ERROR: full_results is not valid output from the bootstrap.enrichment.test function")}
if(sum(!as.character(unique(full_results$results$CellType)) %in% colnames(sct_data[[1]]$specificity))==length(as.character(unique(full_results$results$CellType)))){
stop("ERROR: No celltypes in full_results are found in sct_data. Perhaps the wrong annotLevel was used?")
}
if(sum(!as.character(unique(full_results$results$CellType)) %in% colnames(sct_data[[1]]$specificity))>0){
stop("ERROR: Not all celltypes in full_results are found in sct_data. Perhaps the wrong annotLevel was used?")
}
# Add annotLevel to file name tag
listFileName = sprintf("%s_level%s",listFileName,annotLevel)
results = full_results$results
# Check gene lists
checkedLists = EWCE::check.ewce.genelist.inputs(sct_data,hits,bg,genelistSpecies,sctSpecies)
hits=checkedLists$hits
bg=checkedLists$bg
combinedGenes=unique(c(hits,bg))
# Get expression data of bootstrapped genes
signif_res = rownames(results)[results$p<0.05]
nReps = 1000
exp_mats = list()
for(cc in signif_res){
exp_mats[[cc]] = matrix(0,nrow=nReps,ncol=length(hits))
rownames(exp_mats[[cc]]) = sprintf("Rep%s",1:nReps)
}
for(s in 1:nReps){
bootstrap_set = sample(combinedGenes,length(hits))
ValidGenes = rownames(sct_data[[annotLevel]]$specificity)[rownames(sct_data[[annotLevel]]$specificity) %in% bootstrap_set]
expD = sct_data[[annotLevel]]$specificity[ValidGenes,]
for(cc in signif_res){
exp_mats[[cc]][s,] = sort(expD[,cc])
}
}
# Get expression levels of the hit genes
hit.exp = sct_data[[annotLevel]]$specificity[hits,]
graph_theme = theme_bw(base_size = 12, base_family = "Helvetica") +
theme(panel.grid.major = element_line(size = .5, color = "grey"),
axis.line = element_line(size=.7, color = "black"),legend.position = c(0.75, 0.7), text = element_text(size=14),
axis.title.x = element_text(vjust = -0.35), axis.title.y = element_text(vjust = 0.6)) + theme(legend.title=element_blank())
if (!file.exists("BootstrapPlots")){
dir.create(file.path(getwd(), "BootstrapPlots"))
}
# Plot the QQ plots
for(cc in signif_res){
mean_boot_exp = apply(exp_mats[[cc]],2,mean)
hit_exp = sort(hit.exp[,cc])
hit_exp_names = rownames(hit.exp)[order(hit.exp[,cc])]#names(hit_exp)
dat = data.frame(boot=mean_boot_exp,hit=hit_exp,Gnames=hit_exp_names)
dat$hit = dat$hit*100
dat$boot = dat$boot*100
maxHit = max(dat$hit)
maxX = max(dat$boot)+0.1*max(dat$boot)
#if(sub==TRUE){dat$hit=dat$hit/10;dat$boot=dat$boot/10}
# Plot several variants of the graph
#basic_graph = ggplot(dat,aes(x=boot,y=hit))+geom_point(size=1)+xlab("Mean Bootstrap Expression")+ylab("Expression in cell type (%)\n") + graph_theme +
#    geom_abline(intercept = 0, slope = 1, colour = "red")
basic_graph = ggplot(dat,aes_string(x="boot",y="hit"))+geom_point(size=1)+xlab("Mean Bootstrap Expression")+ylab("Expression in cell type (%)\n") + graph_theme +
geom_abline(intercept = 0, slope = 1, colour = "red")
# Plot without text
pdf(sprintf("BootstrapPlots/qqplot_noText____%s____%s.pdf",listFileName,cc),width=3.5,height=3.5)
print(basic_graph)
dev.off()
dat$symLab = ifelse(dat$hit>25,sprintf("  %s", dat$Gnames),'')
#basic_graph = ggplot(dat,aes(x=boot,y=hit))+geom_point(size=2)+xlab("Mean Bootstrap Expression")+ylab("Expression in cell type (%)\n") + graph_theme +
basic_graph = ggplot(dat,aes_string(x="boot",y="hit"))+geom_point(size=2)+xlab("Mean Bootstrap Expression")+ylab("Expression in cell type (%)\n") + graph_theme +
geom_abline(intercept = 0, slope = 1, colour = "red")
# Plot with gene names
pdf(sprintf("BootstrapPlots/qqplot_wtGSym____%s____%s.pdf",listFileName,cc),width=3.5,height=3.5)
print(basic_graph +
geom_text(aes_string(label="symLab"),hjust=0,vjust=0,size=3) + xlim(c(0,maxX))
)
dev.off()
# Plot with bootstrap distribution
melt_boot = melt(exp_mats[[cc]])
colnames(melt_boot) = c("Rep","Pos","Exp")
actVals = data.frame(pos=as.factor(1:length(hit_exp)),vals=hit_exp)
#if(sub==TRUE){melt_boot$Exp=melt_boot$Exp/10; actVals$vals=actVals$vals/10}
pdf(sprintf("BootstrapPlots/bootDists____%s____%s.pdf",listFileName,cc),width=3.5,height=3.5)
melt_boot$Pos = as.factor(melt_boot$Pos)
#print(ggplot(melt_boot)+geom_boxplot(aes(x=as.factor(Pos),y=Exp),outlier.size=0)+
#         geom_point(aes(x=pos,y=vals),col="red",data=actVals)+
print(ggplot(melt_boot)+geom_boxplot(aes_string(x="Pos",y="Exp"),outlier.size=0)+
geom_point(aes_string(x="pos",y="vals"),col="red",data=actVals)+
ylab("Expression in cell type (%)\n")+
xlab("Least specific --> Most specific") + scale_x_discrete(breaks=NULL)+graph_theme)
dev.off()
# Plot with LOG bootstrap distribution
# - First get the ordered gene names
rownames(dat)=dat$Gnames
datOrdered = data.frame(GSym=rownames(dat),Pos=1:dim(dat)[1])
# - Arrange the data frame for plotting
melt_boot = melt(exp_mats[[cc]])
colnames(melt_boot) = c("Rep","Pos","Exp")
melt_boot$Exp = melt_boot$Exp*100
melt_boot = merge(melt_boot,datOrdered,by="Pos")
melt_boot$GSym = factor(as.character(melt_boot$GSym),levels=as.character(datOrdered$GSym))
# - Prepare the values of the list genes to be plotted as red dots
actVals = data.frame(Pos=as.factor(1:length(hit_exp)),vals=hit_exp*100)
actVals = merge(actVals,datOrdered,by="Pos")
actVals$GSym = factor(as.character(actVals$GSym),levels=as.character(datOrdered$GSym))
# - Determine whether changes are significant
p = rep(1,max(melt_boot$Pos))
for(i in 1:max(melt_boot$Pos)){
p[i] = sum(actVals[actVals$Pos==i,"vals"]<melt_boot[melt_boot$Pos==i,"Exp"])/length(melt_boot[melt_boot$Pos==i,"Exp"])
}
ast = rep("*",max(melt_boot$Pos))
ast[p>0.05] = ""
actVals = cbind(actVals[order(actVals$Pos),],ast)
# - Plot the graph!
# if(sub==TRUE){melt_boot$Exp=melt_boot$Exp/10; actVals$vals=actVals$vals/10}
wd = 1+length(unique(melt_boot[,4]))*0.175
pdf(sprintf("BootstrapPlots/bootDists_LOG____%s____%s.pdf",listFileName,cc),width=wd,height=4)
#melt_boot$Exp=melt_boot$Exp+0.00000001
melt_boot = melt_boot[melt_boot$Exp!=0,]
print(ggplot(melt_boot)+geom_boxplot(aes_string(x="GSym",y="Exp"),outlier.size=0)+graph_theme+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
geom_point(aes_string(x="GSym",y="vals"),col="red",data=actVals)+
geom_text(aes_string(x="GSym",y="vals",label="ast"),colour="black",data=actVals)+
ylab("Expression in cell type (%)\n")+
xlab("Least specific --> Most specific")+scale_y_log10()
)
dev.off()
}
}
generate.bootstrap.plots(sct_data=ctd,hits=mouse.hits, bg=mouse.bg,
reps=reps,full_results=full_results,listFileName="Example",
genelistSpecies="mouse",sctSpecies="mouse", annotLevel=1)
data("ctd")
data("example_genelist")
data("mouse_to_human_homologs")
m2h = unique(mouse_to_human_homologs[,c("HGNC.symbol","MGI.symbol")])
mouse.hits = unique(m2h[m2h$HGNC.symbol %in% example_genelist,"MGI.symbol"])
mouse.bg  = unique(m2h$MGI.symbol)
checkedLists = check.ewce.genelist.inputs(sct_data=ctd,hits=mouse.hits,bg=mouse.bg,genelistSpecies="mouse",sctSpecies="mouse")
#' check.ewce.genelist.inputs
#'
#' \code{check.ewce.genelist.inputs} Is used to check that hits and bg gene lists passed to EWCE are setup correctly. Checks they are the appropriate length.
#' Checks all hits genes are in bg. Checks the species match and if not reduces to 1:1 orthologs.
#'
#' @param sct_data List generated using \code{\link{generate.celltype.data}}
#' @param hits Array of MGI/HGNC gene symbols containing the target gene list.
#' @param bg Array of MGI/HGNC gene symbols containing the background gene list.
#' @param genelistSpecies Either 'mouse' or 'human' depending on whether MGI or HGNC symbols are used for gene lists
#' @param sctSpecies  Either 'mouse' or 'human' depending on whether MGI or HGNC symbols are used for the single cell dataset
#' @param geneSizeControl Will genelists sampled control for GC content and transcript length? Boolean.
#' @return A list containing
#' \itemize{
#'   \item \code{hits}: Array of MGI/HGNC gene symbols containing the target gene list.
#'   \item \code{bg}: Array of MGI/HGNC gene symbols containing the background gene list.
#' }
#'
#'
#' @examples
#' # Called from "bootstrap.enrichment.test()" and "generate.bootstrap.plots()"
#' data("ctd")
#' data("example_genelist")
#' data("mouse_to_human_homologs")
#' m2h = unique(mouse_to_human_homologs[,c("HGNC.symbol","MGI.symbol")])
#' mouse.hits = unique(m2h[m2h$HGNC.symbol %in% example_genelist,"MGI.symbol"])
#' mouse.bg  = unique(m2h$MGI.symbol)
#' checkedLists = check.ewce.genelist.inputs(sct_data=ctd,hits=mouse.hits,bg=mouse.bg,genelistSpecies="mouse",sctSpecies="mouse")
#' @export
#' @import utils
check.ewce.genelist.inputs <- function(sct_data,hits,bg,genelistSpecies,sctSpecies,geneSizeControl=FALSE){
sct_genes  = rownames(sct_data[[1]]$mean_exp)
#data("mouse_to_human_homologs")
#data("all_mgi")
#data("all_hgnc")
mouse_to_human_homologs <- EWCE::mouse_to_human_homologs
all_mgi <- EWCE::all_mgi
all_hgnc <- EWCE::all_hgnc
orthologsOnly=FALSE
# CHECK THE ARGUMENTS ARE PROPERLY STRUCTURED
## Check that all 'hits' are in 'bg'
if(sum(!hits %in% bg)>0){ stop("ERROR: all hits must be in bg") }
## Check that gene lists and single cell dataset are either mouse or human
if(sum(c(genelistSpecies,sctSpecies) %in% c("mouse","human"))!=2){
stop("ERROR: genelistSpecies and sctSpecies must be either mouse or human. If using data from any other species then please convert to mouse/human using only 1:1 orthologs.")
}
## Check that the gene lists are really from the correct species
if(genelistSpecies=="mouse"){
if(sum(hits %in% all_mgi)<4){stop("ERROR: less than four of the hits genes are MGI symbols. They must be provided as correctly formatted MGI symbols (or alter genelistSpecies)")}
if(sum(bg %in% all_mgi)<4){  stop("ERROR: less than four of the bg genes are MGI symbols. They must be provided as correctly formatted MGI symbols (or alter genelistSpecies)")}
if(sum(bg %in% all_mgi)<sum(bg %in% all_hgnc)){stop("ERROR: more bg genes are HGNC genes than MGI genes. Did you provide the correct species?")}
}
if(genelistSpecies=="human"){
if(sum(hits %in% all_hgnc)<4){stop("ERROR: less than four of the hits genes are HGNC symbols. They must be provided as correctly formatted HGNC symbols (or alter genelistSpecies)")}
if(sum(bg %in% all_hgnc)<4){  stop("ERROR: less than four of the bg genes are HGNC symbols. They must be provided as correctly formatted HGNC symbols (or alter genelistSpecies)")}
if(sum(bg %in% all_hgnc)<sum(bg %in% all_mgi)){stop("ERROR: more bg genes are MGI genes than HGNC genes. Did you provide the correct species?")}
}
if(sctSpecies=="mouse"){
if(sum(sct_genes %in% all_mgi) < sum(sct_genes %in% all_hgnc)){stop("ERROR: fewer single cell dataset genes are recognised MGI symbols than HGNC symbols. Did you provide the correct species? And set sctSpecies correctly?")}
}
if(sctSpecies=="human"){
if(sum(sct_genes %in% all_hgnc) < sum(sct_genes %in% all_mgi)){stop("ERROR: fewer single cell dataset genes are recognised HGNC symbols than MGI symbols. Did you provide the correct species? And set sctSpecies correctly?")}
}
## If gene lists and single cell data are from different species... then convert the gene lists to match
if(geneSizeControl==FALSE){
if(sctSpecies=="mouse" & genelistSpecies=="human"){
hits = mouse_to_human_homologs$MGI.symbol[mouse_to_human_homologs$HGNC.symbol %in% hits]
bg = mouse_to_human_homologs$MGI.symbol[mouse_to_human_homologs$HGNC.symbol %in% bg]
orthologsOnly=TRUE
sct_genes = sct_genes[sct_genes %in% mouse_to_human_homologs$MGI.symbol]
}
}
if(sctSpecies=="human" & genelistSpecies=="mouse"){
hits = mouse_to_human_homologs$HGNC.symbol[hits %in% mouse_to_human_homologs$MGI.symbol]
bg = mouse_to_human_homologs$HGNC.symbol[bg %in% mouse_to_human_homologs$MGI.symbol]
orthologsOnly=TRUE
sct_genes = sct_genes[sct_genes %in% mouse_to_human_homologs$HGNC.symbol]
}
# Restrict genesets to only genes in the SCT dataset
if(geneSizeControl==FALSE){
hits = hits[hits %in% sct_genes]
bg   = bg[bg %in% sct_genes]
}
# Check that sufficient genes are still present in the target list
if(length(hits)<4){
stop("ERROR: At least four genes which are present in the single cell dataset & background gene set are required to test for enrichment")
}
# Remove all hit genes from bg
bg   = bg[!bg %in% hits]
# geneSizeControl assumes the genesets are from human genetics... so genelistSpecies must equal "human"
if(geneSizeControl==TRUE & genelistSpecies!="human"){
stop("ERROR: geneSizeControl assumes the genesets are from human genetics... so genelistSpecies must be set to 'human'")
}
return(list(hits=hits,bg=bg))
}
data("ctd")
data("example_genelist")
data("mouse_to_human_homologs")
m2h = unique(mouse_to_human_homologs[,c("HGNC.symbol","MGI.symbol")])
mouse.hits = unique(m2h[m2h$HGNC.symbol %in% example_genelist,"MGI.symbol"])
mouse.bg  = unique(m2h$MGI.symbol)
checkedLists = check.ewce.genelist.inputs(sct_data=ctd,hits=mouse.hits,bg=mouse.bg,genelistSpecies="mouse",sctSpecies="mouse")
