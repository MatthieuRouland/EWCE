boxes_present_inHits = table(eachGeneBOX[hitGenes])
# For each box, sample the number of genes as is present in hitGenes in that box
minCount = 0
for(i in 1:length(boxes_present_inHits)){
boxName = names(boxes_present_inHits[i])
boxFreqInHits = boxes_present_inHits[i]
allGenesInBox = names(eachGeneBOX[eachGeneBOX==boxName])
decile_boot = replicate(reps,sample(allGenesInBox,boxFreqInHits))
minCount = minCount+1
if(minCount==1){
controlled_bootstrap_set = decile_boot
}else{
controlled_bootstrap_set = rbind(controlled_bootstrap_set,decile_boot)
}
}
# minCount = 0
# for(decile in 1:(length(deciles)-1)){
#     decile_min = deciles[decile]
#     decile_max = deciles[decile+1]
#
#     # How many of the hitGenes are in this decile?
#     hitGenes_specificity = sct_data[[annotLevel]]$specificity[hitGenes,controlledCT]
#     num_hitGenes_in_decile = sum(hitGenes_specificity>=decile_min & hitGenes_specificity<decile_max)
#     if(num_hitGenes_in_decile>0){
#
#         # Find all the genes in this decile
#         allGenes_specificity = sct_data[[annotLevel]]$specificity[combinedGenes,controlledCT]
#         genes_in_decile = names(allGenes_specificity)[allGenes_specificity>=decile_min & allGenes_specificity<decile_max]
#         decile_boot = replicate(reps,sample(genes_in_decile,num_hitGenes_in_decile))
#         minCount = minCount+1
#         if(minCount==1){
#             controlled_bootstrap_set = decile_boot
#         }else{
#             controlled_bootstrap_set = rbind(controlled_bootstrap_set,decile_boot)
#         }
#
#     }
# }
return(controlled_bootstrap_set)
}
res_hpsd_schiz = controlled_geneset_enrichment(disease_genes=mouse.hits.schiz, functional_genes = lGenes[lGenes %in% mouse.bg], bg_genes = mouse.bg, sct_data = ctd, annotLevel = 1, reps=1000, controlledCT="pyramidal CA1")
res_hpsd_schiz = controlled_geneset_enrichment(disease_genes=mouse.hits.schiz, functional_genes = lGenes[lGenes %in% mouse.bg], bg_genes = mouse.bg, sct_data = ctd, annotLevel = 1, reps=1000, controlledCT=c("pyramidal CA1","pyramidal SS"))
res_hpsd_schiz
res_hpsd_schiz = controlled_geneset_enrichment(disease_genes=mouse.hits.schiz, functional_genes = lGenes[lGenes %in% mouse.bg], bg_genes = mouse.bg, sct_data = ctd, annotLevel = 1, reps=1000, controlledCT=c("pyramidal CA1"))
res_hpsd_schiz
lists[[jj]]
listNames = unlist(lapply(lists,function(l) l$name))
listNames
jj=12
lGenes = lists[[jj]]$MGI_1to1_Orth
res_hpsd_schiz = controlled_geneset_enrichment(disease_genes=mouse.hits.schiz, functional_genes = lGenes[lGenes %in% mouse.bg], bg_genes = mouse.bg, sct_data = ctd, annotLevel = 1, reps=1000, controlledCT="pyramidal CA1")#controlledCT=controlledCTs)
res_hpsd_schiz
lGenes = lists[[jj]]$MGI_1to1_Orth
res_hpsd_schiz = controlled_geneset_enrichment(disease_genes=mouse.hits.schiz, functional_genes = lGenes[lGenes %in% mouse.bg], bg_genes = mouse.bg, sct_data = ctd, annotLevel = 1, reps=1000, controlledCT="pyramidal CA1")#controlledCT=controlledCTs)
res_hpsd_schiz
#' generate_controlled_bootstrap_geneset
#'
#' \code{generate_controlled_bootstrap_geneset} Used to generated celltype controlled bootstraped
#'
#' @param hitGenes Array of gene names. The target gene set.
#' @param sct_data The cell type data list (with specificity and mean_exp)
#' @param annotLevel The level of annotation in sct_data to analyse
#' @param reps The number of gene lists to sample
#' @param controlledCT Name of a celltype (from colnames of sct_data[[x]]$specificity.
#' @return Matrix of genes (nrows=length(hitGenes),ncols=reps), where each column is a gene list
#' @examples
#' # See vignette
#' @export
#' @import stats
generate_controlled_bootstrap_geneset <- function(hitGenes,sct_data,annotLevel,reps,controlledCT=NULL){ #controlledCT=c("pyramidal CA1","pyramidal SS","interneurons")
if(is.null(controlledCT)){
stop("ERROR: controlledCT cannot be NULL in generate_controlled_bootstrap_geneset")
}
if(annotLevel>length(sct_data)){
stop("ERROR: annotLevel cannot be greater than the number of annotation levels in sct_data")
}
# Check all controlledCT are in single cell data
if(sum(!controlledCT %in% colnames(sct_data[[annotLevel]]$specificity))!=0){
stop("ERROR: not all controlledCT are in colnames(sct_data[[annotLevel]]$specificity)")
}
combinedGenes = rownames(sct_data[[annotLevel]]$mean_exp)
hitGenes = hitGenes[hitGenes %in% combinedGenes]
if(length(hitGenes)==0){
stop("ERROR: length(hitGenes)==0. Perhaps your gene list is from the wrong species? It should be converted to orthologs of the same species as the single cell dataset")
}
hit.cells = cell.list.dist(hitGenes,sct_data,annotLevel) # cell.list.dist gets the summed proportion of 'hitGenes' across all cell types at annotLevel
#quantile_probs = seq(from=0,to=1,by=0.001)
quantile_probs = seq(from=0,to=1,by=0.001)
for(cCT in controlledCT){
tmp_deciles = quantile(sct_data[[annotLevel]]$specificity[,cCT],probs=quantile_probs)
if(cCT==controlledCT[1]){
ct_deciles = tmp_deciles
}else{
ct_deciles = cbind(ct_deciles,tmp_deciles)
}
}
if(is.null(dim(ct_deciles))){ct_deciles=t(t(ct_deciles))}
colnames(ct_deciles) = controlledCT
ct_deciles = unique(ct_deciles)
ct_deciles = ct_deciles[-dim(ct_deciles)[1],,drop=FALSE]
# For each gene, find it's specificity in each controlled celltype
eachGeneSP = matrix(0,nrow=dim(sct_data[[annotLevel]]$specificity)[1],ncol=length(controlledCT))
rownames(eachGeneSP) = rownames(sct_data[[annotLevel]]$specificity)
colnames(eachGeneSP) = controlledCT
for(cCT in controlledCT){
for(gg in rownames(eachGeneSP)){
geneSpecificity = sct_data[[annotLevel]]$specificity[gg,cCT]
whichIDX = sort(which(ct_deciles[,cCT]<geneSpecificity),decreasing=TRUE)[1]
if(is.na(whichIDX)){whichIDX=1}
eachGeneSP[gg,cCT] = ct_deciles[whichIDX,cCT]
}
}
collapseEntries<-function(x){y=paste(x,collapse=",");return(y)}
eachGeneBOX = apply(eachGeneSP,1,collapseEntries)
boxes_present = unique(eachGeneBOX)
boxes_present_inHits = table(eachGeneBOX[hitGenes])
# For each box, sample the number of genes as is present in hitGenes in that box
minCount = 0
for(i in 1:length(boxes_present_inHits)){
boxName = names(boxes_present_inHits[i])
boxFreqInHits = boxes_present_inHits[i]
allGenesInBox = names(eachGeneBOX[eachGeneBOX==boxName])
decile_boot = replicate(reps,sample(allGenesInBox,boxFreqInHits))
minCount = minCount+1
if(minCount==1){
controlled_bootstrap_set = decile_boot
}else{
controlled_bootstrap_set = rbind(controlled_bootstrap_set,decile_boot)
}
}
# minCount = 0
# for(decile in 1:(length(deciles)-1)){
#     decile_min = deciles[decile]
#     decile_max = deciles[decile+1]
#
#     # How many of the hitGenes are in this decile?
#     hitGenes_specificity = sct_data[[annotLevel]]$specificity[hitGenes,controlledCT]
#     num_hitGenes_in_decile = sum(hitGenes_specificity>=decile_min & hitGenes_specificity<decile_max)
#     if(num_hitGenes_in_decile>0){
#
#         # Find all the genes in this decile
#         allGenes_specificity = sct_data[[annotLevel]]$specificity[combinedGenes,controlledCT]
#         genes_in_decile = names(allGenes_specificity)[allGenes_specificity>=decile_min & allGenes_specificity<decile_max]
#         decile_boot = replicate(reps,sample(genes_in_decile,num_hitGenes_in_decile))
#         minCount = minCount+1
#         if(minCount==1){
#             controlled_bootstrap_set = decile_boot
#         }else{
#             controlled_bootstrap_set = rbind(controlled_bootstrap_set,decile_boot)
#         }
#
#     }
# }
return(controlled_bootstrap_set)
}
lGenes = lists[[jj]]$MGI_1to1_Orth
res_hpsd_schiz = controlled_geneset_enrichment(disease_genes=mouse.hits.schiz, functional_genes = lGenes[lGenes %in% mouse.bg], bg_genes = mouse.bg, sct_data = ctd, annotLevel = 1, reps=1000, controlledCT="pyramidal CA1")#controlledCT=controlledCTs)
res_hpsd_schiz
#' generate_controlled_bootstrap_geneset
#'
#' \code{generate_controlled_bootstrap_geneset} Used to generated celltype controlled bootstraped
#'
#' @param hitGenes Array of gene names. The target gene set.
#' @param sct_data The cell type data list (with specificity and mean_exp)
#' @param annotLevel The level of annotation in sct_data to analyse
#' @param reps The number of gene lists to sample
#' @param controlledCT Name of a celltype (from colnames of sct_data[[x]]$specificity.
#' @return Matrix of genes (nrows=length(hitGenes),ncols=reps), where each column is a gene list
#' @examples
#' # See vignette
#' @export
#' @import stats
generate_controlled_bootstrap_geneset <- function(hitGenes,sct_data,annotLevel,reps,controlledCT=NULL){ #controlledCT=c("pyramidal CA1","pyramidal SS","interneurons")
if(is.null(controlledCT)){
stop("ERROR: controlledCT cannot be NULL in generate_controlled_bootstrap_geneset")
}
if(annotLevel>length(sct_data)){
stop("ERROR: annotLevel cannot be greater than the number of annotation levels in sct_data")
}
# Check all controlledCT are in single cell data
if(sum(!controlledCT %in% colnames(sct_data[[annotLevel]]$specificity))!=0){
stop("ERROR: not all controlledCT are in colnames(sct_data[[annotLevel]]$specificity)")
}
combinedGenes = rownames(sct_data[[annotLevel]]$mean_exp)
hitGenes = hitGenes[hitGenes %in% combinedGenes]
if(length(hitGenes)==0){
stop("ERROR: length(hitGenes)==0. Perhaps your gene list is from the wrong species? It should be converted to orthologs of the same species as the single cell dataset")
}
hit.cells = cell.list.dist(hitGenes,sct_data,annotLevel) # cell.list.dist gets the summed proportion of 'hitGenes' across all cell types at annotLevel
#quantile_probs = seq(from=0,to=1,by=0.001)
if(length(controlledCT)==1){byStep=0.001}
if(length(controlledCT)==2){byStep=0.01}
if(length(controlledCT)==3){byStep=0.1}
quantile_probs = seq(from=0,to=1,by=byStep)
for(cCT in controlledCT){
tmp_deciles = quantile(sct_data[[annotLevel]]$specificity[,cCT],probs=quantile_probs)
if(cCT==controlledCT[1]){
ct_deciles = tmp_deciles
}else{
ct_deciles = cbind(ct_deciles,tmp_deciles)
}
}
if(is.null(dim(ct_deciles))){ct_deciles=t(t(ct_deciles))}
colnames(ct_deciles) = controlledCT
ct_deciles = unique(ct_deciles)
ct_deciles = ct_deciles[-dim(ct_deciles)[1],,drop=FALSE]
# For each gene, find it's specificity in each controlled celltype
eachGeneSP = matrix(0,nrow=dim(sct_data[[annotLevel]]$specificity)[1],ncol=length(controlledCT))
rownames(eachGeneSP) = rownames(sct_data[[annotLevel]]$specificity)
colnames(eachGeneSP) = controlledCT
for(cCT in controlledCT){
for(gg in rownames(eachGeneSP)){
geneSpecificity = sct_data[[annotLevel]]$specificity[gg,cCT]
whichIDX = sort(which(ct_deciles[,cCT]<geneSpecificity),decreasing=TRUE)[1]
if(is.na(whichIDX)){whichIDX=1}
eachGeneSP[gg,cCT] = ct_deciles[whichIDX,cCT]
}
}
collapseEntries<-function(x){y=paste(x,collapse=",");return(y)}
eachGeneBOX = apply(eachGeneSP,1,collapseEntries)
boxes_present = unique(eachGeneBOX)
boxes_present_inHits = table(eachGeneBOX[hitGenes])
# For each box, sample the number of genes as is present in hitGenes in that box
minCount = 0
for(i in 1:length(boxes_present_inHits)){
boxName = names(boxes_present_inHits[i])
boxFreqInHits = boxes_present_inHits[i]
allGenesInBox = names(eachGeneBOX[eachGeneBOX==boxName])
decile_boot = replicate(reps,sample(allGenesInBox,boxFreqInHits))
minCount = minCount+1
if(minCount==1){
controlled_bootstrap_set = decile_boot
}else{
controlled_bootstrap_set = rbind(controlled_bootstrap_set,decile_boot)
}
}
# minCount = 0
# for(decile in 1:(length(deciles)-1)){
#     decile_min = deciles[decile]
#     decile_max = deciles[decile+1]
#
#     # How many of the hitGenes are in this decile?
#     hitGenes_specificity = sct_data[[annotLevel]]$specificity[hitGenes,controlledCT]
#     num_hitGenes_in_decile = sum(hitGenes_specificity>=decile_min & hitGenes_specificity<decile_max)
#     if(num_hitGenes_in_decile>0){
#
#         # Find all the genes in this decile
#         allGenes_specificity = sct_data[[annotLevel]]$specificity[combinedGenes,controlledCT]
#         genes_in_decile = names(allGenes_specificity)[allGenes_specificity>=decile_min & allGenes_specificity<decile_max]
#         decile_boot = replicate(reps,sample(genes_in_decile,num_hitGenes_in_decile))
#         minCount = minCount+1
#         if(minCount==1){
#             controlled_bootstrap_set = decile_boot
#         }else{
#             controlled_bootstrap_set = rbind(controlled_bootstrap_set,decile_boot)
#         }
#
#     }
# }
return(controlled_bootstrap_set)
}
res_hpsd_schiz = controlled_geneset_enrichment(disease_genes=mouse.hits.schiz, functional_genes = lGenes[lGenes %in% mouse.bg], bg_genes = mouse.bg, sct_data = ctd, annotLevel = 1, reps=1000, controlledCT="pyramidal CA1")#controlledCT=controlledCTs)
res_hpsd_schiz
res_hpsd_schiz = controlled_geneset_enrichment(disease_genes=mouse.hits.schiz, functional_genes = lGenes[lGenes %in% mouse.bg], bg_genes = mouse.bg, sct_data = ctd, annotLevel = 1, reps=1000, controlledCT=c("pyramidal CA1","pyramidal SS"))
res_hpsd_schiz
controlledCTs
res_hpsd_schiz = controlled_geneset_enrichment(disease_genes=mouse.hits.schiz, functional_genes = lGenes[lGenes %in% mouse.bg], bg_genes = mouse.bg, sct_data = ctd, annotLevel = 1, reps=1000, controlledCT=controlledCTs)
#' generate_controlled_bootstrap_geneset
#'
#' \code{generate_controlled_bootstrap_geneset} Used to generated celltype controlled bootstraped
#'
#' @param hitGenes Array of gene names. The target gene set.
#' @param sct_data The cell type data list (with specificity and mean_exp)
#' @param annotLevel The level of annotation in sct_data to analyse
#' @param reps The number of gene lists to sample
#' @param controlledCT Name of a celltype (from colnames of sct_data[[x]]$specificity.
#' @return Matrix of genes (nrows=length(hitGenes),ncols=reps), where each column is a gene list
#' @examples
#' # See vignette
#' @export
#' @import stats
generate_controlled_bootstrap_geneset <- function(hitGenes,sct_data,annotLevel,reps,controlledCT=NULL){ #controlledCT=c("pyramidal CA1","pyramidal SS","interneurons")
if(is.null(controlledCT)){
stop("ERROR: controlledCT cannot be NULL in generate_controlled_bootstrap_geneset")
}
if(annotLevel>length(sct_data)){
stop("ERROR: annotLevel cannot be greater than the number of annotation levels in sct_data")
}
# Check all controlledCT are in single cell data
if(sum(!controlledCT %in% colnames(sct_data[[annotLevel]]$specificity))!=0){
stop("ERROR: not all controlledCT are in colnames(sct_data[[annotLevel]]$specificity)")
}
combinedGenes = rownames(sct_data[[annotLevel]]$mean_exp)
hitGenes = hitGenes[hitGenes %in% combinedGenes]
if(length(hitGenes)==0){
stop("ERROR: length(hitGenes)==0. Perhaps your gene list is from the wrong species? It should be converted to orthologs of the same species as the single cell dataset")
}
hit.cells = cell.list.dist(hitGenes,sct_data,annotLevel) # cell.list.dist gets the summed proportion of 'hitGenes' across all cell types at annotLevel
#quantile_probs = seq(from=0,to=1,by=0.001)
if(length(controlledCT)==1){byStep=0.001}
if(length(controlledCT)==2){byStep=0.01}
if(length(controlledCT)>=3){byStep=0.1}
quantile_probs = seq(from=0,to=1,by=byStep)
for(cCT in controlledCT){
tmp_deciles = quantile(sct_data[[annotLevel]]$specificity[,cCT],probs=quantile_probs)
if(cCT==controlledCT[1]){
ct_deciles = tmp_deciles
}else{
ct_deciles = cbind(ct_deciles,tmp_deciles)
}
}
if(is.null(dim(ct_deciles))){ct_deciles=t(t(ct_deciles))}
colnames(ct_deciles) = controlledCT
ct_deciles = unique(ct_deciles)
ct_deciles = ct_deciles[-dim(ct_deciles)[1],,drop=FALSE]
# For each gene, find it's specificity in each controlled celltype
eachGeneSP = matrix(0,nrow=dim(sct_data[[annotLevel]]$specificity)[1],ncol=length(controlledCT))
rownames(eachGeneSP) = rownames(sct_data[[annotLevel]]$specificity)
colnames(eachGeneSP) = controlledCT
for(cCT in controlledCT){
for(gg in rownames(eachGeneSP)){
geneSpecificity = sct_data[[annotLevel]]$specificity[gg,cCT]
whichIDX = sort(which(ct_deciles[,cCT]<geneSpecificity),decreasing=TRUE)[1]
if(is.na(whichIDX)){whichIDX=1}
eachGeneSP[gg,cCT] = ct_deciles[whichIDX,cCT]
}
}
collapseEntries<-function(x){y=paste(x,collapse=",");return(y)}
eachGeneBOX = apply(eachGeneSP,1,collapseEntries)
boxes_present = unique(eachGeneBOX)
boxes_present_inHits = table(eachGeneBOX[hitGenes])
# For each box, sample the number of genes as is present in hitGenes in that box
minCount = 0
for(i in 1:length(boxes_present_inHits)){
boxName = names(boxes_present_inHits[i])
boxFreqInHits = boxes_present_inHits[i]
allGenesInBox = names(eachGeneBOX[eachGeneBOX==boxName])
decile_boot = replicate(reps,sample(allGenesInBox,boxFreqInHits))
minCount = minCount+1
if(minCount==1){
controlled_bootstrap_set = decile_boot
}else{
controlled_bootstrap_set = rbind(controlled_bootstrap_set,decile_boot)
}
}
# minCount = 0
# for(decile in 1:(length(deciles)-1)){
#     decile_min = deciles[decile]
#     decile_max = deciles[decile+1]
#
#     # How many of the hitGenes are in this decile?
#     hitGenes_specificity = sct_data[[annotLevel]]$specificity[hitGenes,controlledCT]
#     num_hitGenes_in_decile = sum(hitGenes_specificity>=decile_min & hitGenes_specificity<decile_max)
#     if(num_hitGenes_in_decile>0){
#
#         # Find all the genes in this decile
#         allGenes_specificity = sct_data[[annotLevel]]$specificity[combinedGenes,controlledCT]
#         genes_in_decile = names(allGenes_specificity)[allGenes_specificity>=decile_min & allGenes_specificity<decile_max]
#         decile_boot = replicate(reps,sample(genes_in_decile,num_hitGenes_in_decile))
#         minCount = minCount+1
#         if(minCount==1){
#             controlled_bootstrap_set = decile_boot
#         }else{
#             controlled_bootstrap_set = rbind(controlled_bootstrap_set,decile_boot)
#         }
#
#     }
# }
return(controlled_bootstrap_set)
}
res_hpsd_schiz = controlled_geneset_enrichment(disease_genes=mouse.hits.schiz, functional_genes = lGenes[lGenes %in% mouse.bg], bg_genes = mouse.bg, sct_data = ctd, annotLevel = 1, reps=1000, controlledCT=controlledCTs)
res_hpsd_schiz
res_hpsd_schiz = controlled_geneset_enrichment(disease_genes=mouse.hits.schiz, functional_genes = lGenes[lGenes %in% mouse.bg], bg_genes = mouse.bg, sct_data = ctd, annotLevel = 1, reps=1000, controlledCT=controlledCTs)
res_hpsd_schiz
controlledCTs = c("pyramidal CA1","pyramidal SS","interneurons","Medium Spiny Neuron")
for(jj in 1:length(lists)){
lGenes = lists[[jj]]$MGI_1to1_Orth
res_hpsd_schiz = controlled_geneset_enrichment(disease_genes=mouse.hits.schiz, functional_genes = lGenes[lGenes %in% mouse.bg], bg_genes = mouse.bg, sct_data = ctd, annotLevel = 1, reps=1000, controlledCT=controlledCTs)#controlledCT=controlledCTs)
lists[[jj]]$p_uncontrolled = res_hpsd_schiz$p_uncontrolled
lists[[jj]]$p_controlled = res_hpsd_schiz$p_controlled
print(lists[[jj]]$name)
print(sprintf("Uncontrolled: %s",lists[[jj]]$p_uncontrolled))
print(sprintf("Controlled: %s",lists[[jj]]$p_controlled))
}
controlledCTs = c("pyramidal CA1","pyramidal SS","interneurons","Medium Spiny Neuron")
for(jj in 1:length(lists)){
lGenes = lists[[jj]]$MGI_1to1_Orth
res_hpsd_schiz = controlled_geneset_enrichment(disease_genes=mouse.hits.schiz, functional_genes = lGenes[lGenes %in% mouse.bg], bg_genes = mouse.bg, sct_data = ctd, annotLevel = 1, reps=1000, controlledCT=controlledCTs)#controlledCT=controlledCTs)
lists[[jj]]$p_uncontrolled = res_hpsd_schiz$p_uncontrolled
lists[[jj]]$p_controlled = res_hpsd_schiz$p_controlled
print(lists[[jj]]$name)
print(sprintf("Uncontrolled: %s",lists[[jj]]$p_uncontrolled))
print(sprintf("Controlled: %s",lists[[jj]]$p_controlled))
}
listNames = unlist(lapply(lists,function(l) l$name))
listPcont = unlist(lapply(lists,function(l) l$p_controlled))
listPuncont = unlist(lapply(lists,function(l) l$p_uncontrolled))
listRes = data.frame(name=listNames,p_uncontrolled=listPuncont,p_controlled=listPcont)
listRes[1:20,]
listRes = listRes[order(listRes$p_controlled),]
listRes[1:20,]
listRes = listRes[order(listRes$p_uncontrolled),]
listRes[1:20,]
load("/Users/ns9/Downloads/LDSC_GWAS_Results_stepSize_0.1.Rda")
all_gwas[1:3,]
unique(all_gwas$file)
all_gwas$file=="celltype_data_ABI_HUMAN_MTG_InKIcortex_level1_thresh0_trim0"
unique(all_gwas$gwas)
all_gwas[all_gwas$file=="celltype_data_ABI_HUMAN_MTG_InKIcortex_level1_thresh0_trim0" & all_gwas$gwas=="IQ.Sneikers2016.sumstats.txt",]
dim(all_gwas[all_gwas$file=="celltype_data_ABI_HUMAN_MTG_InKIcortex_level1_thresh0_trim0" & all_gwas$gwas=="IQ.Sneikers2016.sumstats.txt",])
all_gwas[all_gwas$file=="celltype_data_ABI_HUMAN_MTG_InKIcortex_level1_thresh0_trim0" & all_gwas$gwas=="IQ.Sneikers2016.sumstats.txt",]
all_gwas[all_gwas$file=="celltype_data_ABI_HUMAN_MTG_InKIcortex_level1_thresh0_trim0" & all_gwas$gwas=="IQ.Sneikers2016.sumstats.txt" & all_gwas$percentile==1,]
all_gwas[all_gwas$file=="celltype_data_ABI_HUMAN_MTG_InKIcortex_level1_thresh0_trim0" & all_gwas$gwas=="IQ.Sneikers2016.sumstats.txt" & all_gwas$percentile==1 & all_gwas$stepSize!="NA",]
all_gwas[all_gwas$file=="celltype_data_ABI_HUMAN_MTG_InKIcortex_level1_thresh0_trim0" & all_gwas$gwas=="IQ.Sneikers2016.sumstats.txt" & all_gwas$percentile==1 & !is.na(all_gwas$stepSize),]
all_gwas[all_gwas$file=="celltype_data_ABI_HUMAN_MTG_InKIcortex_level1_thresh0_trim0" & all_gwas$gwas=="IQ.Sneikers2016.sumstats.txt" & all_gwas$percentile==1,]
bbb=all_gwas[all_gwas$file=="celltype_data_ABI_HUMAN_MTG_InKIcortex_level1_thresh0_trim0" & all_gwas$gwas=="IQ.Sneikers2016.sumstats.txt" & all_gwas$percentile==1,]
bbb$stepSize
is.na(bbb$stepSize)
bbb[!is.na(bbb$stepSize),
]
bbb
all_gwas_ABI_IQ = bbb[!is.na(bbb$stepSize),]
all_gwas_ABI_IQ
save(all_gwas_ABI_IQ,file="all_gwas_ABI_IQ.rda")
getwd()
save(all_gwas_ABI_IQ,file="/Users/ns9/Desktop/all_gwas_ABI_IQ.rda")
log(0.00003612716)
log(0.00003612716,2)
log(0.00003612716,10)
devtools::document(())
devtools::document(
)
load("/Users/ns9/Box Sync/Patrick & Julien/celltype_data_allKImouse_wtHypo_MergedStriatal_1to1only_level1_thresh0_trim0.rda")
ctd=list()
ctd[[1]] = celltype_data[[1]]
ctd[[1]]$specificity = ctd[[1]]$cell_dists
ctd[[1]]$mean_exp = ctd[[1]]$all_scts
data("mouse_to_human_homologs")
m2h = unique(mouse_to_human_homologs[,c("HGNC.symbol","MGI.symbol")])
schiz_genes = read.csv("/Users/ns9/Google Drive/DiseaseLists/schiz_magma_top10percent.txt",stringsAsFactors = FALSE)[-1,1]
mouse.hits.schiz = schiz_genes
mouse.bg  = unique(m2h$MGI.symbol)
rm(list=ls())
data("mouse_to_human_homologs")
m2h = unique(mouse_to_human_homologs[,c("HGNC.symbol","MGI.symbol")])
data("schiz_genes")
data("id_genes")
mouse.hits.schiz = unique(m2h[m2h$HGNC.symbol %in% schiz_genes,"MGI.symbol"])
mouse.hits.id = unique(m2h[m2h$HGNC.symbol %in% id_genes,"MGI.symbol"])
mouse.bg  = unique(m2h$MGI.symbol)
data("hpsd_genes")
mouse.hpsd = unique(m2h[m2h$HGNC.symbol %in% hpsd_genes,"MGI.symbol"])
data("rbfox_genes")
res_hpsd_schiz = controlled_geneset_enrichment(disease_genes=mouse.hits.schiz, functional_genes = mouse.hpsd, bg_genes = mouse.bg, sct_data = ctd, annotLevel = 1, reps=1000, controlledCT="pyramidal CA1")
res_rbfox_schiz = controlled_geneset_enrichment(disease_genes=mouse.hits.schiz, functional_genes = rbfox_genes, bg_genes = mouse.bg, sct_data = ctd, annotLevel = 1, reps=1000, controlledCT="pyramidal CA1")
print(res_hpsd_schiz)
print(res_rbfox_schiz)
res_hpsd_id = controlled_geneset_enrichment(disease_genes=mouse.hits.id, functional_genes = mouse.hpsd, bg_genes = mouse.bg, sct_data = ctd, annotLevel = 1, reps=1000, controlledCT="pyramidal SS")
res_rbfox_id = controlled_geneset_enrichment(disease_genes=mouse.hits.id, functional_genes = rbfox_genes, bg_genes = mouse.bg, sct_data = ctd, annotLevel = 1, reps=1000, controlledCT="pyramidal SS")
print(res_hpsd_id)
print(res_rbfox_id)
devtools::document()
library(EWCE)
devtools::document()
devtools::document()
library(EWCE)
devtools::document()
library(EWCE)
library(EWCE)
data("mouse_to_human_homologs")
m2h = unique(mouse_to_human_homologs[,c("HGNC.symbol","MGI.symbol")])
data("schiz_genes")
data("id_genes")
mouse.hits.schiz = unique(m2h[m2h$HGNC.symbol %in% schiz_genes,"MGI.symbol"])
mouse.hits.id = unique(m2h[m2h$HGNC.symbol %in% id_genes,"MGI.symbol"])
mouse.bg  = unique(m2h$MGI.symbol)
data("hpsd_genes")
mouse.hpsd = unique(m2h[m2h$HGNC.symbol %in% hpsd_genes,"MGI.symbol"])
data("rbfox_genes")
res_hpsd_schiz = controlled_geneset_enrichment(disease_genes=mouse.hits.schiz, functional_genes = mouse.hpsd, bg_genes = mouse.bg, sct_data = ctd, annotLevel = 1, reps=1000, controlledCT="pyramidal CA1")
res_rbfox_schiz = controlled_geneset_enrichment(disease_genes=mouse.hits.schiz, functional_genes = rbfox_genes, bg_genes = mouse.bg, sct_data = ctd, annotLevel = 1, reps=1000, controlledCT="pyramidal CA1")
print(res_hpsd_schiz)
print(res_rbfox_schiz)
res_hpsd_id = controlled_geneset_enrichment(disease_genes=mouse.hits.id, functional_genes = mouse.hpsd, bg_genes = mouse.bg, sct_data = ctd, annotLevel = 1, reps=1000, controlledCT="pyramidal SS")
res_rbfox_id = controlled_geneset_enrichment(disease_genes=mouse.hits.id, functional_genes = rbfox_genes, bg_genes = mouse.bg, sct_data = ctd, annotLevel = 1, reps=1000, controlledCT="pyramidal SS")
print(res_hpsd_id)
print(res_rbfox_id)
controlledCTs = c("pyramidal CA1","pyramidal SS","interneurons","Medium Spiny Neuron")
res_hpsd_id = controlled_geneset_enrichment(disease_genes=mouse.hits.id, functional_genes = mouse.hpsd, bg_genes = mouse.bg, sct_data = ctd, annotLevel = 1, reps=1000, controlledCT=controlledCTs)
res_rbfox_id = controlled_geneset_enrichment(disease_genes=mouse.hits.id, functional_genes = rbfox_genes, bg_genes = mouse.bg, sct_data = ctd, annotLevel = 1, reps=1000, controlledCT=controlledCTs)
print(res_hpsd_id)
print(res_rbfox_id)
ctd[[1]]$specificity[1:3,]
controlledCTs = c("pyramidal CA1","pyramidal SS","interneurons")
res_hpsd_id = controlled_geneset_enrichment(disease_genes=mouse.hits.id, functional_genes = mouse.hpsd, bg_genes = mouse.bg, sct_data = ctd, annotLevel = 1, reps=1000, controlledCT=controlledCTs)
res_rbfox_id = controlled_geneset_enrichment(disease_genes=mouse.hits.id, functional_genes = rbfox_genes, bg_genes = mouse.bg, sct_data = ctd, annotLevel = 1, reps=1000, controlledCT=controlledCTs)
print(res_hpsd_id)
print(res_rbfox_id)
res_hpsd_schiz = controlled_geneset_enrichment(disease_genes=mouse.hits.schiz, functional_genes = mouse.hpsd, bg_genes = mouse.bg, sct_data = ctd, annotLevel = 1, reps=1000, controlledCT=controlledCTs)
res_rbfox_schiz = controlled_geneset_enrichment(disease_genes=mouse.hits.schiz, functional_genes = rbfox_genes, bg_genes = mouse.bg, sct_data = ctd, annotLevel = 1, reps=1000, controlledCT=controlledCTs)
print(res_hpsd_schiz)
print(res_rbfox_schiz)
devtools::document()
devtools::document()
devtools::document()
library(EWCE)
library(EWCE)
devtools::document()
devtools::document()
library(EWCE)
devtools::document()
library(EWCE)
